// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array s;
    field int maxLen, len;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
      let maxLen = maxLength;
      if (maxLen > 0) {
        let s = Array.new(maxLength);
      }

      let len = 0;

      return this;
    }

    /** Disposes this string. */
    method void dispose() {
      if (maxLen > 0) {
        do s.dispose();
      }
      let len = 0;
      let maxLen = 0;

      return;
    }

    /** Returns the current length of this string. */
    method int length() {
      return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
      return s[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
      let s[j] = c;

      return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
      if (len < maxLen) {
        let s[len] = c;
        let len = len + 1;
      }

      return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
      let len = len - 1;

      return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
      var int sum, i;
      var boolean is_num, neg;

      let sum = 0;
      let i = 0;
      let is_num = true;
      let neg = false;
      while ((i < len) & is_num) {
        let sum = sum * 10;
        if (s[i] = 45) {
          let neg = true;
        } else {
          if ((s[i] < 48) | (s[i] > 57)) {
            let is_num = false;
          } else {
            let sum = sum + (s[i] - 48);
          }
        }

        let i = i + 1;
      }

      if (neg) {
        let sum = -sum;
      }

      return sum;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
      var String o;
      var int tmp;
      var boolean neg;

      let neg = false;
      if (val < 0) {
        let neg = true;
      }
      
      let o = String.new(16);
      let val = Math.abs(val);
      while (val > 0) {
        let tmp = val - ((val / 10) * 10);
        let val = val / 10;
        do o.appendChar(tmp + 48);
      }

      let len = 0;
      if (neg) {
        do appendChar(45);
      }

      let tmp = o.length() - 1;
      while (~(tmp < 0)) {
        do appendChar(o.charAt(tmp));
        let tmp = tmp - 1;
      }

      do o.dispose();

      return;
    }

    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }
}
